/*RunTimesMatrixMulitplication.java
        Authors: Dohmen, RJH (i6250494)
        Schnabel, CT (i6255807)

1. Our method asks for user input to determine the number n of test iterations for both methods (10.000 used to generate output below)

2. We then run a for loop from i=0 to n
3. In each iteration, we generate a random Integer >0 using the base java random method
4. We then call both methods on this same integer and tally their runtimes separately
5. For sufficiently large numbers (say 100.000 or higher), as we generate 100.000+ random integers, we can be reasonably sure (by the laws of probability) that many different lengths of integers / magnitudes will be tested

OUTPUT:
****************
Enter how many iterations you would like to test the methods on: 100000
For 100000 tries, isIntPalindromeLong took in total 8.0 milliseconds.
For 100000 tries, isIntPalindromeLong took on  average 8.0E-5 milliseconds.

For 100000 tries, isIntPalindromeSmart took in total 149.0 milliseconds.
For 100000 tries, isIntPalindromeSmart took on  average 0.00149 milliseconds.

Validation:
For the palindrome number 1435341, the Smart Method returns: true
And for the same palindrome number, the Long Method returns: true

Process finished with exit code 0 
****************